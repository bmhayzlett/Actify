c
options
name
self.assoc_options[name]
self.assoc_options
c
self.assoc_options
self.class.assoc_options
self.class
self
options
c
@options.foreign_key
n
c
n
next
options
self.class
name
self
c
self.class
self.methods
self.model_name
self
self.name
c
x
self.class_name
self
self.name
c
options
next
@options.primary_key
@options
c
@options
c
n
next
name
c
@options.foreign_key
self.send(@options.foreign_key)
@options.model_class
options.model_class
model_class
options
name
self
@options
c
@options = BelongsToOptions.new(name,options)
c
name
@options = BelongsToOptions.new(name,options)
c
options
name
c
self
options
name
c
self.class_name.to_sym
self.class_name
c
self.class_name
self
c
continue
self_class_name
name
c
self.send ".#{key} =", value
self.send "#{key} =", value
self.send(".#{key} =", value)
self.foreign_key
self.foreign_key = value
self
self.send("#{key} =", value)
c
key.to_s
self
c
self."foreign_key"
self.:foreign_key
key.to_s
key.to_str
self.foreign_key = value
key
self.methods
c
key
self.#{key} = value
self[#{key}] = value
self.key = value
self
self[key] = value
self[key]
value
key
c
options[:class_name]
options
options[class_name]
c
self.primary_key
c
options[primary_key]
options.primary_key
c
next
options
c
self.class_name
self.class_name = name.capitalize
name.capitalize
c
"house id".underscore
name.underscore
self
name
self
name
self.name
c
options
name
c
self.table_name
c
self.parse_all(a)
self
a
c
cat["name"]
cat["name]
cat[name]
cat.name
cat = cats.first
cats = Cat.where(name: 'Breakfast')
expect(cat.name).to eq("Breakfast")
expect(cats.length).to eq(1)
expect(cat.name)
cat
cat.name
cat = cats.first
cats = Cat.where(name: 'Breakfast')
cats = Cat.where(name: 'Breakfas')
cats = Cat.where(name: 'Breakfast')
cats
cat.name
cat
c
*params.values
search_query
search_table
c
params.values.join(", ")
params.values
params.keys.map{ |key| key.to_s+" = ?"}.join(" AND ")
params.keys.map{ |key| key.to_s+"= ?"}.join(" AND ")
params.keys.map{ |key| key.to_s = ?}.join(" AND ")
params.keys.map{ |key| #{key.to_s = ?}}.join(" AND ")
params.keys.map{ |key| key.to_s}.join(" AND ")
params.keys.map{ |key| key.to_s}
params.keys.to_s
params.keys
params
self.to_s.downcase + "s"
self.to_s.downcase + "s
self.to_s.downcase
self.to_s
self.toS
self.downcase + "s"
self
self.class
params.values
params.value
params.keys
params
self
c
self.id
c
self
c
self
continue
search_attributes
continue
self.attribute_values[1..-1].concat(self.attribute_values[0])
self.attribute_values[1..-1]
continue
self.attribute_values
update_string
next
self.house_id
self.houseid
self.lname
self.fname
self.attribute_values
self.class.table_name
sets
continue
sets
continue
sets
continue
attr_name
sets
self.class.table_name
continue
@attributes
self.attribute_values
self.class.columns[1..-1].join(", ")
continue
sets_array
next
continue
self.attribute_values
sets
sets_array
next
continue
self.id
self
DBConnection.last_insert_row_id
continue
self.attribute_values
search_string
a
c
continue
col_names
#{question_mark}
question_marks
col_names.split(", ")
col_names
self.class.table_name
continue
quit
y
x
x, y = *self.attribute_values
*self.attribute_values
self.attribute_values
search_string
n
self.class.table_name
question_marks
col_names
quit
